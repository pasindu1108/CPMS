/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DataBaseLayer.DataBaseConnection;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Milan.C.Maduwantha
 */
public class Report extends javax.swing.JInternalFrame {

    private byte[] file;

    /**
     * Creates new form Dashboard
     */
    public Report() {
        initComponents();
        this.setSize(getMinimumSize());
    }
    private Connection conDB;
    private String url;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setMinimumSize(new java.awt.Dimension(1250, 600));
        setPreferredSize(new java.awt.Dimension(1250, 600));

        jPanel2.setBackground(java.awt.Color.white);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Images/time-attendance-system-1.jpg"))); // NOI18N
        jButton1.setMaximumSize(new java.awt.Dimension(180, 500));
        jButton1.setMinimumSize(new java.awt.Dimension(180, 500));
        jButton1.setPreferredSize(null);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Images/inventory-management-clipboard-warehouse-guy-feature.jpg"))); // NOI18N
        jButton2.setMaximumSize(new java.awt.Dimension(180, 500));
        jButton2.setMinimumSize(new java.awt.Dimension(180, 500));
        jButton2.setPreferredSize(null);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Images/the-money-question-how-much.jpg"))); // NOI18N
        jButton3.setMaximumSize(new java.awt.Dimension(180, 500));
        jButton3.setMinimumSize(new java.awt.Dimension(180, 500));
        jButton3.setPreferredSize(null);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Images/Estimating-Startup-Expenses.jpg"))); // NOI18N
        jButton4.setMaximumSize(new java.awt.Dimension(180, 500));
        jButton4.setMinimumSize(new java.awt.Dimension(180, 500));

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Images/https___blogs-images.forbes.com_alejandrocremades_files_2018_07_office-3295556_1920-1-1200x730.jpg"))); // NOI18N
        jButton5.setMaximumSize(new java.awt.Dimension(180, 500));
        jButton5.setMinimumSize(new java.awt.Dimension(180, 500));
        jButton5.setPreferredSize(null);

        jButton6.setText("Project Assignment Report");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Attendance Report");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Summary Report");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Inventory Report");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Leaves Report");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButton10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton7)
                    .addComponent(jButton8)
                    .addComponent(jButton9)
                    .addComponent(jButton10))
                .addContainerGap(79, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:

        ArrayList<String> list = new ArrayList<String>();
        ArrayList<String> list2 = new ArrayList<String>();
        ArrayList<String> list3 = new ArrayList<String>();
        ArrayList<String> list4 = new ArrayList<String>();
        ArrayList<String> list5 = new ArrayList<String>();
        String filename = null;

        try {

            Connection con = DataBaseConnection.getDBconnection();
            String query = "SELECT * FROM `project_assign`";
            PreparedStatement ps = con.prepareStatement(query);

            Statement st = con.createStatement();
            ResultSet rs = ps.executeQuery(query);

            ResultSetMetaData rsmd = rs.getMetaData();

            while (rs.next()) {

                /*Add values to array lists*/
                list.add(rs.getString(1));
                list2.add(rs.getString(2));
                list3.add(rs.getString(3));
                list4.add(rs.getString(5));
                list5.add(rs.getString(6));

            }

            /*Creating PNG file of the bill by writing values to the image*/
            BufferedImage bufferedImage = new BufferedImage(4960, 7016, BufferedImage.TYPE_INT_RGB);
            Graphics graphics = bufferedImage.getGraphics();
            //graphics.setColor(Color.LIGHT_GRAY);
            graphics.fillRect(0, 0, 4960, 7016);
            graphics.setColor(Color.BLACK);
            graphics.setFont(new Font("Arial Black", Font.BOLD, 10));
            graphics.drawString("Poject Assignment Report", 210, 45);
            graphics.drawString("PID", 20, 100);
            graphics.drawString("Employee ID", 130, 100);
            graphics.drawString("Start Date", 250, 100);
            graphics.drawString("End Date", 400, 100);
            graphics.drawString("Position", 500, 100);

            int x = 50;
            int y = 50;
            int z = 50;
            int q = 50;
            int a = 50;

            /*Writing values to the PNG file*/
            for (int i = 0; i < list.size(); i++) {
                x = x + 100;
                System.out.print(list.get(i));
                graphics.drawString(list.get(i), 20, x);
            }
            for (int i = 0; i < list2.size(); i++) {
                y = y + 100;
                System.out.print(list2.get(i));
                graphics.drawString(list2.get(i), 130, y);
            }
            for (int i = 0; i < list.size(); i++) {
                z = z + 100;
                System.out.print(list3.get(i));
                graphics.drawString(list3.get(i), 250, z);
            }
            for (int i = 0; i < list.size(); i++) {
                q = q + 100;
                System.out.print(list4.get(i));
                graphics.drawString(list4.get(i), 400, q);
            }
            for (int i = 0; i < list.size(); i++) {
                a = a + 100;
                System.out.print(list5.get(i));
                graphics.drawString(list5.get(i), 500, a);
            }

            /*Store the image file in a folder */
            ImageIO.write(bufferedImage, "png", new File("C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\projectassign.png"));

        } catch (Exception e1) {
            System.out.println(e1);
            JOptionPane.showMessageDialog(null, "Error Occured");
        }

        try {

            File f = new File("C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\projectassign.png");
            // lbl_chart.setIcon(new ImageIcon(f.toString()));
            filename = f.toString();
            ///  ImageIcon imageIcon = new ImageIcon(new ImageIcon(filename).getImage().getScaledInstance(lbl_chart.getWidth(),lbl_chart.getHeight(), lbl_chart.getWidth()));
            // lbl_chart.setIcon(imageIcon);
        } catch (Exception e) {
            System.out.println(e);
        }

        try {

            File image = new File(filename);
            FileInputStream fis = new FileInputStream(image);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for (int readNum; (readNum = fis.read(buf)) != -1;) {
                bos.write(buf, 0, readNum);

            }
            file = bos.toByteArray();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);

        }

        String newrecord = null;
        String recordid = null;

        try {

            Connection con = DataBaseConnection.getDBconnection();

            String query = "select * from projectassignreports ORDER BY ReportID DESC LIMIT 1";
            PreparedStatement ps = con.prepareStatement(query);
            Statement statement = con.createStatement();
            ResultSet resultset = ps.executeQuery(query);

            while (resultset.next()) {

                recordid = resultset.getString(1);
                System.out.print(recordid);

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Occured.");
        }
        if (recordid == null) {
            newrecord = "PA100000";
        } else {
            String lastrecordid = recordid.substring(2, 8);
            System.out.print(lastrecordid);
            int newid = Integer.parseInt(lastrecordid);
            int newrecordid = newid + 1;
            String id = Integer.toString(newrecordid);
            newrecord = "PA" + id;

        }

        SimpleDateFormat myFormat = new SimpleDateFormat("dd/MM/yyyy");

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDateTime now = LocalDateTime.now();
        String date = dtf.format(now);
        System.out.println(date);

        try {

            Connection con = DataBaseConnection.getDBconnection();
            String query = " insert into projectassignreports (ReportID,Date,File) values (?, ?, ?)";
            PreparedStatement ps = con.prepareStatement(query);

            ps.setString(1, newrecord);
            ps.setString(2, date);
            ps.setBytes(3, file);

            ps.executeUpdate();

        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(null, "Error Occured.");
        }

        list.clear();
        list2.clear();
        list3.clear();
        list4.clear();
        list5.clear();

        try {

            Connection con = DataBaseConnection.getDBconnection();
            String query = "SELECT * FROM `project_assign`";
            PreparedStatement ps = con.prepareStatement(query);

            Statement st = con.createStatement();
            ResultSet rs = ps.executeQuery(query);

            ResultSetMetaData rsmd = rs.getMetaData();

            while (rs.next()) {

                /*Add values to array lists*/
                list.add(rs.getString(1));
                list2.add(rs.getString(2));
                list3.add(rs.getString(3));
                list4.add(rs.getString(5));
                list5.add(rs.getString(6));

            }

            /*Creating PNG file of the bill by writing values to the image*/
            BufferedImage bufferedImage = new BufferedImage(4960, 7016, BufferedImage.TYPE_INT_RGB);
            Graphics graphics = bufferedImage.getGraphics();
            //graphics.setColor(Color.LIGHT_GRAY);
            graphics.fillRect(0, 0, 4960, 7016);
            graphics.setColor(Color.BLACK);
            graphics.setFont(new Font("Arial Black", Font.BOLD, 10));
            graphics.drawString("Poject Assignment Report", 210, 45);
            graphics.drawString("PID", 20, 100);
            graphics.drawString("Employee ID", 120, 100);
            graphics.drawString("Start Date", 220, 100);
            graphics.drawString("End Date", 370, 100);
            graphics.drawString("Position", 470, 100);

            int x = 50;
            int y = 50;
            int z = 50;
            int q = 50;
            int a = 50;

            /*Writing values to the PNG file*/
            for (int i = 0; i < list.size(); i++) {
                x = x + 100;
                System.out.print(list.get(i));
                graphics.drawString(list.get(i), 20, x);
            }
            for (int i = 0; i < list2.size(); i++) {
                y = y + 100;
                System.out.print(list2.get(i));
                graphics.drawString(list2.get(i), 120, y);
            }
            for (int i = 0; i < list.size(); i++) {
                z = z + 100;
                System.out.print(list3.get(i));
                graphics.drawString(list3.get(i), 220, z);
            }
            for (int i = 0; i < list.size(); i++) {
                q = q + 100;
                System.out.print(list4.get(i));
                graphics.drawString(list4.get(i), 370, q);
            }
            for (int i = 0; i < list.size(); i++) {
                a = a + 100;
                System.out.print(list5.get(i));
                graphics.drawString(list5.get(i), 470, a);
            }

            /*Store the image file in a folder */
            ImageIO.write(bufferedImage, "png", new File("C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\projectassign.png"));

        } catch (Exception e1) {
            System.out.println(e1);
            JOptionPane.showMessageDialog(null, "Error Occured");
        }

        com.itextpdf.text.Document document = new com.itextpdf.text.Document(PageSize.A4);
        String input = "C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\projectassign.png"; // .gif and .jpg are ok too!
        String output = "C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\projectassignreport.pdf";
        try {
            FileOutputStream fos = new FileOutputStream(output);
            PdfWriter writer = PdfWriter.getInstance(document, fos);
            writer.open();
            document.open();
            document.add(Image.getInstance(input));
            document.close();
            writer.close();

            JOptionPane.showMessageDialog(null, "Report Created");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Occured");
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:

        ArrayList<String> list = new ArrayList<String>();
        ArrayList<String> list2 = new ArrayList<String>();
        ArrayList<String> list3 = new ArrayList<String>();
        ArrayList<String> list4 = new ArrayList<String>();
        ArrayList<String> list5 = new ArrayList<String>();
        String filename = null;

        try {

            Connection con = DataBaseConnection.getDBconnection();
            String query = "SELECT * FROM `attendence`";
            PreparedStatement ps = con.prepareStatement(query);

            Statement st = con.createStatement();
            ResultSet rs = ps.executeQuery(query);

            ResultSetMetaData rsmd = rs.getMetaData();

            while (rs.next()) {

                /*Add values to array lists*/
                list.add(rs.getString(2));
                list2.add(rs.getString(3));
                list3.add(rs.getString(4));
                list4.add(rs.getString(5));
                list5.add(rs.getString(6));

            }

            /*Creating PNG file of the bill by writing values to the image*/
            BufferedImage bufferedImage = new BufferedImage(4960, 7016, BufferedImage.TYPE_INT_RGB);
            Graphics graphics = bufferedImage.getGraphics();
            //graphics.setColor(Color.LIGHT_GRAY);
            graphics.fillRect(0, 0, 4960, 7016);
            graphics.setColor(Color.BLACK);
            graphics.setFont(new Font("Arial Black", Font.BOLD, 10));
            graphics.drawString("Attendence Report", 210, 45);
            graphics.drawString("EMP ID", 20, 100);
            graphics.drawString("PID", 130, 100);
            graphics.drawString("Date", 250, 100);
            graphics.drawString("Intime", 400, 100);
            graphics.drawString("Outtime", 500, 100);

            int x = 50;
            int y = 50;
            int z = 50;
            int q = 50;
            int a = 50;

            /*Writing values to the PNG file*/
            for (int i = 0; i < list.size(); i++) {
                x = x + 100;
                System.out.print(list.get(i));
                graphics.drawString(list.get(i), 20, x);
            }
            for (int i = 0; i < list2.size(); i++) {
                y = y + 100;
                System.out.print(list2.get(i));
                graphics.drawString(list2.get(i), 130, y);
            }
            for (int i = 0; i < list.size(); i++) {
                z = z + 100;
                System.out.print(list3.get(i));
                graphics.drawString(list3.get(i), 250, z);
            }
            for (int i = 0; i < list.size(); i++) {
                q = q + 100;
                System.out.print(list4.get(i));
                graphics.drawString(list4.get(i), 400, q);
            }
            for (int i = 0; i < list.size(); i++) {
                a = a + 100;
                System.out.print(list5.get(i));
                graphics.drawString(list5.get(i), 500, a);
            }

            /*Store the image file in a folder */
            ImageIO.write(bufferedImage, "png", new File("C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\attendence.png"));

        } catch (Exception e1) {
            System.out.println(e1);
            System.out.print("erro1");
            JOptionPane.showMessageDialog(null, "Error Occured");
        }

        try {

            File f = new File("C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\attendence.png");
            // lbl_chart.setIcon(new ImageIcon(f.toString()));
            filename = f.toString();
            ///  ImageIcon imageIcon = new ImageIcon(new ImageIcon(filename).getImage().getScaledInstance(lbl_chart.getWidth(),lbl_chart.getHeight(), lbl_chart.getWidth()));
            // lbl_chart.setIcon(imageIcon);
        } catch (Exception e) {
            System.out.print("erro2");
            System.out.println(e);
        }

        try {

            File image = new File(filename);
            FileInputStream fis = new FileInputStream(image);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for (int readNum; (readNum = fis.read(buf)) != -1;) {
                bos.write(buf, 0, readNum);

            }
            file = bos.toByteArray();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);

        }

        String newrecord = null;
        String recordid = null;

        try {

            Connection con = DataBaseConnection.getDBconnection();

            String query = "select * from attendencereports ORDER BY ReportID DESC LIMIT 1";
            PreparedStatement ps = con.prepareStatement(query);
            Statement statement = con.createStatement();
            ResultSet resultset = ps.executeQuery(query);

            while (resultset.next()) {

                recordid = resultset.getString(1);
                System.out.print(recordid);

            }

        } catch (Exception e) {
            System.out.print("erro3");
            JOptionPane.showMessageDialog(null, "Error Occured.");
        }
        if (recordid == null) {
            newrecord = "AR100000";
        } else {
            String lastrecordid = recordid.substring(2, 8);
            System.out.print(lastrecordid);
            int newid = Integer.parseInt(lastrecordid);
            int newrecordid = newid + 1;
            String id = Integer.toString(newrecordid);
            newrecord = "AR" + id;

        }

        SimpleDateFormat myFormat = new SimpleDateFormat("dd/MM/yyyy");

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDateTime now = LocalDateTime.now();
        String date = dtf.format(now);
        System.out.println(date);

        try {

            Connection con = DataBaseConnection.getDBconnection();
            String query = " insert into attendencereports (ReportID,Date,File) values (?, ?, ?)";
            PreparedStatement ps = con.prepareStatement(query);

            ps.setString(1, newrecord);
            ps.setString(2, date);
            ps.setBytes(3, file);

            ps.executeUpdate();

        } catch (Exception e) {
            System.out.println(e);
            System.out.print("erro4");
            JOptionPane.showMessageDialog(null, "Error Occured.");
        }

        list.clear();
        list2.clear();
        list3.clear();
        list4.clear();
        list5.clear();

        try {

            Connection con = DataBaseConnection.getDBconnection();
            String query = "SELECT * FROM `attendence`";
            PreparedStatement ps = con.prepareStatement(query);

            Statement st = con.createStatement();
            ResultSet rs = ps.executeQuery(query);

            ResultSetMetaData rsmd = rs.getMetaData();

            while (rs.next()) {

                /*Add values to array lists*/
                list.add(rs.getString(2));
                list2.add(rs.getString(3));
                list3.add(rs.getString(4));
                list4.add(rs.getString(5));
                list5.add(rs.getString(6));

            }

            /*Creating PNG file of the bill by writing values to the image*/
            BufferedImage bufferedImage = new BufferedImage(4960, 7016, BufferedImage.TYPE_INT_RGB);
            Graphics graphics = bufferedImage.getGraphics();
            //graphics.setColor(Color.LIGHT_GRAY);
            graphics.fillRect(0, 0, 4960, 7016);
            graphics.setColor(Color.BLACK);
            graphics.setFont(new Font("Arial Black", Font.BOLD, 10));
            graphics.drawString("Attendence Report", 210, 45);
            graphics.drawString("EMP ID", 20, 100);
            graphics.drawString("PID", 130, 100);
            graphics.drawString("Date", 250, 100);
            graphics.drawString("Intime", 400, 100);
            graphics.drawString("Outtime", 500, 100);

            int x = 50;
            int y = 50;
            int z = 50;
            int q = 50;
            int a = 50;

            /*Writing values to the PNG file*/
            for (int i = 0; i < list.size(); i++) {
                x = x + 100;
                System.out.print(list.get(i));
                graphics.drawString(list.get(i), 20, x);
            }
            for (int i = 0; i < list2.size(); i++) {
                y = y + 100;
                System.out.print(list2.get(i));
                graphics.drawString(list2.get(i), 130, y);
            }
            for (int i = 0; i < list.size(); i++) {
                z = z + 100;
                System.out.print(list3.get(i));
                graphics.drawString(list3.get(i), 250, z);
            }
            for (int i = 0; i < list.size(); i++) {
                q = q + 100;
                System.out.print(list4.get(i));
                graphics.drawString(list4.get(i), 400, q);
            }
            for (int i = 0; i < list.size(); i++) {
                a = a + 100;
                System.out.print(list5.get(i));
                graphics.drawString(list5.get(i), 500, a);
            }

            /*Store the image file in a folder */
            ImageIO.write(bufferedImage, "png", new File("C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\attendence.png"));

        } catch (Exception e1) {
            System.out.println(e1);
            System.out.print("erro5");
            JOptionPane.showMessageDialog(null, "Error Occured");
        }

        com.itextpdf.text.Document document = new com.itextpdf.text.Document(PageSize.A4);
        String input = "C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\attendence.png"; // .gif and .jpg are ok too!
        String output = "C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\attendence.pdf";
        try {
            FileOutputStream fos = new FileOutputStream(output);
            PdfWriter writer = PdfWriter.getInstance(document, fos);
            writer.open();
            document.open();
            document.add(Image.getInstance(input));
            document.close();
            writer.close();

            JOptionPane.showMessageDialog(null, "Report Created");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Occured");
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:

        ArrayList<String> list = new ArrayList<String>();
        ArrayList<String> list2 = new ArrayList<String>();
        ArrayList<String> list3 = new ArrayList<String>();
        ArrayList<String> list4 = new ArrayList<String>();
        ArrayList<String> list5 = new ArrayList<String>();
        String filename = null;

        try {

            Connection con = DataBaseConnection.getDBconnection();
            String query = "SELECT * FROM `projects`";
            PreparedStatement ps = con.prepareStatement(query);

            Statement st = con.createStatement();
            ResultSet rs = ps.executeQuery(query);

            ResultSetMetaData rsmd = rs.getMetaData();

            while (rs.next()) {

                /*Add values to array lists*/
                list.add(rs.getString(1));
                list2.add(rs.getString(2));
                list3.add(rs.getString(3));
                list4.add(rs.getString(5));
                list5.add(rs.getString(6));

            }

            /*Creating PNG file of the bill by writing values to the image*/
            BufferedImage bufferedImage = new BufferedImage(4960, 7016, BufferedImage.TYPE_INT_RGB);
            Graphics graphics = bufferedImage.getGraphics();
            //graphics.setColor(Color.LIGHT_GRAY);
            graphics.fillRect(0, 0, 4960, 7016);
            graphics.setColor(Color.BLACK);
            graphics.setFont(new Font("Arial Black", Font.BOLD, 10));
            graphics.drawString("Poject Details Report", 210, 45);
            graphics.drawString("PID", 20, 100);
            graphics.drawString("CID", 130, 100);
            graphics.drawString("Project Name", 250, 100);
            graphics.drawString("Start Date", 400, 100);
            graphics.drawString("Enda Date", 500, 100);

            int x = 50;
            int y = 50;
            int z = 50;
            int q = 50;
            int a = 50;

            /*Writing values to the PNG file*/
            for (int i = 0; i < list.size(); i++) {
                x = x + 100;
                System.out.print(list.get(i));
                graphics.drawString(list.get(i), 20, x);
            }
            for (int i = 0; i < list2.size(); i++) {
                y = y + 100;
                System.out.print(list2.get(i));
                graphics.drawString(list2.get(i), 130, y);
            }
            for (int i = 0; i < list.size(); i++) {
                z = z + 100;
                System.out.print(list3.get(i));
                graphics.drawString(list3.get(i), 250, z);
            }
            for (int i = 0; i < list.size(); i++) {
                q = q + 100;
                System.out.print(list4.get(i));
                graphics.drawString(list4.get(i), 400, q);
            }
            for (int i = 0; i < list.size(); i++) {
                a = a + 100;
                System.out.print(list5.get(i));
                graphics.drawString(list5.get(i), 500, a);
            }

            /*Store the image file in a folder */
            ImageIO.write(bufferedImage, "png", new File("C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\project.png"));

        } catch (Exception e1) {
            System.out.println(e1);
            JOptionPane.showMessageDialog(null, "Error Occured");
        }

        try {

            File f = new File("C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\project.png");
            // lbl_chart.setIcon(new ImageIcon(f.toString()));
            filename = f.toString();
            ///  ImageIcon imageIcon = new ImageIcon(new ImageIcon(filename).getImage().getScaledInstance(lbl_chart.getWidth(),lbl_chart.getHeight(), lbl_chart.getWidth()));
            // lbl_chart.setIcon(imageIcon);
        } catch (Exception e) {
            System.out.println(e);
        }

        try {

            File image = new File(filename);
            FileInputStream fis = new FileInputStream(image);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for (int readNum; (readNum = fis.read(buf)) != -1;) {
                bos.write(buf, 0, readNum);

            }
            file = bos.toByteArray();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);

        }

        String newrecord = null;
        String recordid = null;

        try {

            Connection con = DataBaseConnection.getDBconnection();

            String query = "select * from projectreports ORDER BY ReportID DESC LIMIT 1";
            PreparedStatement ps = con.prepareStatement(query);
            Statement statement = con.createStatement();
            ResultSet resultset = ps.executeQuery(query);

            while (resultset.next()) {

                recordid = resultset.getString(1);
                System.out.print(recordid);

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Occured.");
        }
        if (recordid == null) {
            newrecord = "PR100000";
        } else {
            String lastrecordid = recordid.substring(2, 8);
            System.out.print(lastrecordid);
            int newid = Integer.parseInt(lastrecordid);
            int newrecordid = newid + 1;
            String id = Integer.toString(newrecordid);
            newrecord = "PR" + id;

        }

        SimpleDateFormat myFormat = new SimpleDateFormat("dd/MM/yyyy");

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDateTime now = LocalDateTime.now();
        String date = dtf.format(now);
        System.out.println(date);

        try {

            Connection con = DataBaseConnection.getDBconnection();
            String query = " insert into projectreports (ReportID,Date,File) values (?, ?, ?)";
            PreparedStatement ps = con.prepareStatement(query);

            ps.setString(1, newrecord);
            ps.setString(2, date);
            ps.setBytes(3, file);

            ps.executeUpdate();

        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(null, "Error Occured.");
        }

        list.clear();
        list2.clear();
        list3.clear();
        list4.clear();
        list5.clear();

        try {

            Connection con = DataBaseConnection.getDBconnection();
            String query = "SELECT * FROM `projects`";
            PreparedStatement ps = con.prepareStatement(query);

            Statement st = con.createStatement();
            ResultSet rs = ps.executeQuery(query);

            ResultSetMetaData rsmd = rs.getMetaData();

            while (rs.next()) {

                /*Add values to array lists*/
                list.add(rs.getString(1));
                list2.add(rs.getString(2));
                list3.add(rs.getString(3));
                list4.add(rs.getString(5));
                list5.add(rs.getString(6));

            }

            /*Creating PNG file of the bill by writing values to the image*/
            BufferedImage bufferedImage = new BufferedImage(4960, 7016, BufferedImage.TYPE_INT_RGB);
            Graphics graphics = bufferedImage.getGraphics();
            //graphics.setColor(Color.LIGHT_GRAY);
            graphics.fillRect(0, 0, 4960, 7016);
            graphics.setColor(Color.BLACK);
            graphics.setFont(new Font("Arial Black", Font.BOLD, 10));
            graphics.drawString("Project Details Report", 210, 45);
            graphics.drawString("PID", 20, 100);
            graphics.drawString("CID", 120, 100);
            graphics.drawString("Project Name", 220, 100);
            graphics.drawString("Start Date", 370, 100);
            graphics.drawString("End Date", 470, 100);

            int x = 50;
            int y = 50;
            int z = 50;
            int q = 50;
            int a = 50;

            /*Writing values to the PNG file*/
            for (int i = 0; i < list.size(); i++) {
                x = x + 100;
                System.out.print(list.get(i));
                graphics.drawString(list.get(i), 20, x);
            }
            for (int i = 0; i < list2.size(); i++) {
                y = y + 100;
                System.out.print(list2.get(i));
                graphics.drawString(list2.get(i), 120, y);
            }
            for (int i = 0; i < list.size(); i++) {
                z = z + 100;
                System.out.print(list3.get(i));
                graphics.drawString(list3.get(i), 220, z);
            }
            for (int i = 0; i < list.size(); i++) {
                q = q + 100;
                System.out.print(list4.get(i));
                graphics.drawString(list4.get(i), 370, q);
            }
            for (int i = 0; i < list.size(); i++) {
                a = a + 100;
                System.out.print(list5.get(i));
                graphics.drawString(list5.get(i), 470, a);
            }

            /*Store the image file in a folder */
            ImageIO.write(bufferedImage, "png", new File("C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\project.png"));

        } catch (Exception e1) {
            System.out.println(e1);
            JOptionPane.showMessageDialog(null, "Error Occured");
        }

        com.itextpdf.text.Document document = new com.itextpdf.text.Document(PageSize.A4);
        String input = "C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\project.png"; // .gif and .jpg are ok too!
        String output = "C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\project.pdf";
        try {
            FileOutputStream fos = new FileOutputStream(output);
            PdfWriter writer = PdfWriter.getInstance(document, fos);
            writer.open();
            document.open();
            document.add(Image.getInstance(input));
            document.close();
            writer.close();

            JOptionPane.showMessageDialog(null, "Report Created");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Occured");
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:

        ArrayList<String> list = new ArrayList<String>();
        ArrayList<String> list2 = new ArrayList<String>();
        ArrayList<String> list3 = new ArrayList<String>();
        ArrayList<String> list4 = new ArrayList<String>();
        ArrayList<String> list5 = new ArrayList<String>();
        String filename = null;

        try {

            Connection con = DataBaseConnection.getDBconnection();
            String query = "SELECT * FROM `inventory`";
            PreparedStatement ps = con.prepareStatement(query);

            Statement st = con.createStatement();
            ResultSet rs = ps.executeQuery(query);

            ResultSetMetaData rsmd = rs.getMetaData();

            while (rs.next()) {

                /*Add values to array lists*/
                list.add(rs.getString(1));
                list2.add(rs.getString(2));
                list3.add(rs.getString(3));
                list4.add(rs.getString(4));
                list5.add(rs.getString(6));

            }

            /*Creating PNG file of the bill by writing values to the image*/
            BufferedImage bufferedImage = new BufferedImage(4960, 7016, BufferedImage.TYPE_INT_RGB);
            Graphics graphics = bufferedImage.getGraphics();
            //graphics.setColor(Color.LIGHT_GRAY);
            graphics.fillRect(0, 0, 4960, 7016);
            graphics.setColor(Color.BLACK);
            graphics.setFont(new Font("Arial Black", Font.BOLD, 10));
            graphics.drawString("Inventory Report", 210, 45);
            graphics.drawString("Itemcode", 20, 100);
            graphics.drawString("PID", 130, 100);
            graphics.drawString("Supplier ID", 250, 100);
            graphics.drawString("Name", 400, 100);
            graphics.drawString("Unit Price", 500, 100);

            int x = 50;
            int y = 50;
            int z = 50;
            int q = 50;
            int a = 50;

            /*Writing values to the PNG file*/
            for (int i = 0; i < list.size(); i++) {
                x = x + 100;
                System.out.print(list.get(i));
                graphics.drawString(list.get(i), 20, x);
            }
            for (int i = 0; i < list2.size(); i++) {
                y = y + 100;
                System.out.print(list2.get(i));
                graphics.drawString(list2.get(i), 130, y);
            }
            for (int i = 0; i < list.size(); i++) {
                z = z + 100;
                System.out.print(list3.get(i));
                graphics.drawString(list3.get(i), 250, z);
            }
            for (int i = 0; i < list.size(); i++) {
                q = q + 100;
                System.out.print(list4.get(i));
                graphics.drawString(list4.get(i), 400, q);
            }
            for (int i = 0; i < list.size(); i++) {
                a = a + 100;
                System.out.print(list5.get(i));
                graphics.drawString(list5.get(i), 500, a);
            }

            /*Store the image file in a folder */
            ImageIO.write(bufferedImage, "png", new File("C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\inventory.png"));

        } catch (Exception e1) {
            System.out.println(e1);
            System.out.println("error1");
            JOptionPane.showMessageDialog(null, "Error Occured");
        }

        try {

            File f = new File("C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\inventory.png");
            // lbl_chart.setIcon(new ImageIcon(f.toString()));
            filename = f.toString();
            ///  ImageIcon imageIcon = new ImageIcon(new ImageIcon(filename).getImage().getScaledInstance(lbl_chart.getWidth(),lbl_chart.getHeight(), lbl_chart.getWidth()));
            // lbl_chart.setIcon(imageIcon);
        } catch (Exception e) {
            System.out.println("error2");
            System.out.println(e);
        }

        try {

            File image = new File(filename);
            FileInputStream fis = new FileInputStream(image);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for (int readNum; (readNum = fis.read(buf)) != -1;) {
                bos.write(buf, 0, readNum);

            }
            file = bos.toByteArray();
        } catch (Exception e) {
            System.out.println("error3");
            JOptionPane.showMessageDialog(null, e);

        }

        String newrecord = null;
        String recordid = null;

        try {

            Connection con = DataBaseConnection.getDBconnection();

            String query = "select * from inventoryreports ORDER BY ReportID DESC LIMIT 1";
            PreparedStatement ps = con.prepareStatement(query);
            Statement statement = con.createStatement();
            ResultSet resultset = ps.executeQuery(query);

            while (resultset.next()) {

                recordid = resultset.getString(1);
                System.out.print(recordid);

            }

        } catch (Exception e) {
            System.out.println("error5");
            JOptionPane.showMessageDialog(null, "Error Occured.");
        }
        if (recordid == null) {
            newrecord = "IR100000";
        } else {
            String lastrecordid = recordid.substring(2, 8);
            System.out.print(lastrecordid);
            int newid = Integer.parseInt(lastrecordid);
            int newrecordid = newid + 1;
            String id = Integer.toString(newrecordid);
            newrecord = "IR" + id;

        }

        SimpleDateFormat myFormat = new SimpleDateFormat("dd/MM/yyyy");

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDateTime now = LocalDateTime.now();
        String date = dtf.format(now);
        System.out.println(date);

        try {

            Connection con = DataBaseConnection.getDBconnection();
            String query = " insert into inventoryreports (ReportID,Date,File) values (?, ?, ?)";
            PreparedStatement ps = con.prepareStatement(query);

            ps.setString(1, newrecord);
            ps.setString(2, date);
            ps.setBytes(3, file);

            ps.executeUpdate();

        } catch (Exception e) {
            System.out.println(e);
            System.out.println("error4");
            JOptionPane.showMessageDialog(null, "Error Occured.");
        }

        list.clear();
        list2.clear();
        list3.clear();
        list4.clear();
        list5.clear();

        try {

            Connection con = DataBaseConnection.getDBconnection();
            String query = "SELECT * FROM `inventory`";
            PreparedStatement ps = con.prepareStatement(query);

            Statement st = con.createStatement();
            ResultSet rs = ps.executeQuery(query);

            ResultSetMetaData rsmd = rs.getMetaData();

            while (rs.next()) {

                /*Add values to array lists*/
                list.add(rs.getString(1));
                list2.add(rs.getString(2));
                list3.add(rs.getString(3));
                list4.add(rs.getString(4));
                list5.add(rs.getString(6));

            }

            /*Creating PNG file of the bill by writing values to the image*/
            BufferedImage bufferedImage = new BufferedImage(4960, 7016, BufferedImage.TYPE_INT_RGB);
            Graphics graphics = bufferedImage.getGraphics();
            //graphics.setColor(Color.LIGHT_GRAY);
            graphics.fillRect(0, 0, 4960, 7016);
            graphics.setColor(Color.BLACK);
            graphics.setFont(new Font("Arial Black", Font.BOLD, 10));
            graphics.drawString("Inventory Report", 210, 45);
            graphics.drawString("Itemcode", 20, 100);
            graphics.drawString("PID", 130, 100);
            graphics.drawString("Supplier ID", 250, 100);
            graphics.drawString("Name", 400, 100);
            graphics.drawString("Unit Price", 500, 100);

            int x = 50;
            int y = 50;
            int z = 50;
            int q = 50;
            int a = 50;

            /*Writing values to the PNG file*/
            for (int i = 0; i < list.size(); i++) {
                x = x + 100;
                System.out.print(list.get(i));
                graphics.drawString(list.get(i), 20, x);
            }
            for (int i = 0; i < list2.size(); i++) {
                y = y + 100;
                System.out.print(list2.get(i));
                graphics.drawString(list2.get(i), 120, y);
            }
            for (int i = 0; i < list.size(); i++) {
                z = z + 100;
                System.out.print(list3.get(i));
                graphics.drawString(list3.get(i), 220, z);
            }
            for (int i = 0; i < list.size(); i++) {
                q = q + 100;
                System.out.print(list4.get(i));
                graphics.drawString(list4.get(i), 370, q);
            }
            for (int i = 0; i < list.size(); i++) {
                a = a + 100;
                System.out.print(list5.get(i));
                graphics.drawString(list5.get(i), 470, a);
            }

            /*Store the image file in a folder */
            ImageIO.write(bufferedImage, "png", new File("C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\inventory.png"));

        } catch (Exception e1) {
            System.out.println(e1);
            System.out.println("error5");
            JOptionPane.showMessageDialog(null, "Error Occured");
        }

        com.itextpdf.text.Document document = new com.itextpdf.text.Document(PageSize.A4);
        String input = "C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\inventory.png"; // .gif and .jpg are ok too!
        String output = "C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\inventory.pdf";
        try {
            FileOutputStream fos = new FileOutputStream(output);
            PdfWriter writer = PdfWriter.getInstance(document, fos);
            writer.open();
            document.open();
            document.add(Image.getInstance(input));
            document.close();
            writer.close();

            JOptionPane.showMessageDialog(null, "Report Created");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Occured");
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:

        ArrayList<String> list = new ArrayList<String>();
        ArrayList<String> list2 = new ArrayList<String>();
        ArrayList<String> list3 = new ArrayList<String>();
        ArrayList<String> list4 = new ArrayList<String>();
        ArrayList<String> list5 = new ArrayList<String>();
        String filename = null;

        try {

            Connection con = DataBaseConnection.getDBconnection();
            String query = "SELECT * FROM `empleaves`";
            PreparedStatement ps = con.prepareStatement(query);

            Statement st = con.createStatement();
            ResultSet rs = ps.executeQuery(query);

            ResultSetMetaData rsmd = rs.getMetaData();

            while (rs.next()) {

                /*Add values to array lists*/
                list.add(rs.getString(2));
                list2.add(rs.getString(3));
                list3.add(rs.getString(4));
                list4.add(rs.getString(5));
                list5.add(rs.getString(7));

            }

            /*Creating PNG file of the bill by writing values to the image*/
            BufferedImage bufferedImage = new BufferedImage(4960, 7016, BufferedImage.TYPE_INT_RGB);
            Graphics graphics = bufferedImage.getGraphics();
            //graphics.setColor(Color.LIGHT_GRAY);
            graphics.fillRect(0, 0, 4960, 7016);
            graphics.setColor(Color.BLACK);
            graphics.setFont(new Font("Arial Black", Font.BOLD, 10));
            graphics.drawString("Leaves Report", 210, 45);
            graphics.drawString("Employee ID", 20, 100);
            graphics.drawString("Date", 130, 100);
            graphics.drawString("Leave Type", 250, 100);
            graphics.drawString("Duration", 400, 100);
            graphics.drawString("Approvel", 500, 100);

            int x = 50;
            int y = 50;
            int z = 50;
            int q = 50;
            int a = 50;

            /*Writing values to the PNG file*/
            for (int i = 0; i < list.size(); i++) {
                x = x + 100;
                System.out.print(list.get(i));
                graphics.drawString(list.get(i), 20, x);
            }
            for (int i = 0; i < list2.size(); i++) {
                y = y + 100;
                System.out.print(list2.get(i));
                graphics.drawString(list2.get(i), 130, y);
            }
            for (int i = 0; i < list.size(); i++) {
                z = z + 100;
                System.out.print(list3.get(i));
                graphics.drawString(list3.get(i), 250, z);
            }
            for (int i = 0; i < list.size(); i++) {
                q = q + 100;
                System.out.print(list4.get(i));
                graphics.drawString(list4.get(i), 400, q);
            }
            for (int i = 0; i < list.size(); i++) {
                a = a + 100;
                System.out.print(list5.get(i));
                graphics.drawString(list5.get(i), 500, a);
            }

            /*Store the image file in a folder */
            ImageIO.write(bufferedImage, "png", new File("C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\leaves.png"));

        } catch (Exception e1) {
            System.out.println(e1);
            System.out.println("error1");
            JOptionPane.showMessageDialog(null, "Error Occured");
        }

        try {

            File f = new File("C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\leaves.png");
            // lbl_chart.setIcon(new ImageIcon(f.toString()));
            filename = f.toString();
            ///  ImageIcon imageIcon = new ImageIcon(new ImageIcon(filename).getImage().getScaledInstance(lbl_chart.getWidth(),lbl_chart.getHeight(), lbl_chart.getWidth()));
            // lbl_chart.setIcon(imageIcon);
        } catch (Exception e) {
            System.out.println("error2");
            System.out.println(e);
        }

        try {

            File image = new File(filename);
            FileInputStream fis = new FileInputStream(image);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for (int readNum; (readNum = fis.read(buf)) != -1;) {
                bos.write(buf, 0, readNum);

            }
            file = bos.toByteArray();
        } catch (Exception e) {
            System.out.println("error3");
            JOptionPane.showMessageDialog(null, e);

        }

        String newrecord = null;
        String recordid = null;

        try {

            Connection con = DataBaseConnection.getDBconnection();

            String query = "select * from leavesreport ORDER BY ReportID DESC LIMIT 1";
            PreparedStatement ps = con.prepareStatement(query);
            Statement statement = con.createStatement();
            ResultSet resultset = ps.executeQuery(query);

            while (resultset.next()) {

                recordid = resultset.getString(1);
                System.out.print(recordid);

            }

        } catch (Exception e) {
            System.out.println("error5");
            JOptionPane.showMessageDialog(null, "Error Occured.");
        }
        if (recordid == null) {
            newrecord = "LR100000";
        } else {
            String lastrecordid = recordid.substring(2, 8);
            System.out.print(lastrecordid);
            int newid = Integer.parseInt(lastrecordid);
            int newrecordid = newid + 1;
            String id = Integer.toString(newrecordid);
            newrecord = "LR" + id;

        }

        SimpleDateFormat myFormat = new SimpleDateFormat("dd/MM/yyyy");

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDateTime now = LocalDateTime.now();
        String date = dtf.format(now);
        System.out.println(date);

        try {

            Connection con = DataBaseConnection.getDBconnection();
            String query = " insert into leavesreport (ReportID,Date,File) values (?, ?, ?)";
            PreparedStatement ps = con.prepareStatement(query);

            ps.setString(1, newrecord);
            ps.setString(2, date);
            ps.setBytes(3, file);

            ps.executeUpdate();

        } catch (Exception e) {
            System.out.println(e);
            System.out.println("error4");
            JOptionPane.showMessageDialog(null, "Error Occured.");
        }

        list.clear();
        list2.clear();
        list3.clear();
        list4.clear();
        list5.clear();

        try {

            Connection con = DataBaseConnection.getDBconnection();
            String query = "SELECT * FROM `empleaves`";
            PreparedStatement ps = con.prepareStatement(query);

            Statement st = con.createStatement();
            ResultSet rs = ps.executeQuery(query);

            ResultSetMetaData rsmd = rs.getMetaData();

            while (rs.next()) {

                /*Add values to array lists*/
                list.add(rs.getString(2));
                list2.add(rs.getString(3));
                list3.add(rs.getString(4));
                list4.add(rs.getString(5));
                list5.add(rs.getString(7));

            }

            /*Creating PNG file of the bill by writing values to the image*/
            BufferedImage bufferedImage = new BufferedImage(4960, 7016, BufferedImage.TYPE_INT_RGB);
            Graphics graphics = bufferedImage.getGraphics();
            //graphics.setColor(Color.LIGHT_GRAY);
            graphics.fillRect(0, 0, 4960, 7016);
            graphics.setColor(Color.BLACK);
            graphics.setFont(new Font("Arial Black", Font.BOLD, 10));
            graphics.drawString("Leaves Report", 210, 45);
            graphics.drawString("Employee ID", 20, 100);
            graphics.drawString("Date", 120, 100);
            graphics.drawString("Leave Type", 220, 100);
            graphics.drawString("Duration", 370, 100);
            graphics.drawString("Approvel", 470, 100);

            int x = 50;
            int y = 50;
            int z = 50;
            int q = 50;
            int a = 50;

            /*Writing values to the PNG file*/
            for (int i = 0; i < list.size(); i++) {
                x = x + 100;
                System.out.print(list.get(i));
                graphics.drawString(list.get(i), 20, x);
            }
            for (int i = 0; i < list2.size(); i++) {
                y = y + 100;
                System.out.print(list2.get(i));
                graphics.drawString(list2.get(i), 120, y);
            }
            for (int i = 0; i < list.size(); i++) {
                z = z + 100;
                System.out.print(list3.get(i));
                graphics.drawString(list3.get(i), 220, z);
            }
            for (int i = 0; i < list.size(); i++) {
                q = q + 100;
                System.out.print(list4.get(i));
                graphics.drawString(list4.get(i), 370, q);
            }
            for (int i = 0; i < list.size(); i++) {
                a = a + 100;
                System.out.print(list5.get(i));
                graphics.drawString(list5.get(i), 470, a);
            }

            /*Store the image file in a folder */
            ImageIO.write(bufferedImage, "png", new File("C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\leaves.png"));

        } catch (Exception e1) {
            System.out.println(e1);
            System.out.println("error5");
            JOptionPane.showMessageDialog(null, "Error Occured");
        }

        com.itextpdf.text.Document document = new com.itextpdf.text.Document(PageSize.A4);
        String input = "C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\leaves.png"; // .gif and .jpg are ok too!
        String output = "C:\\Users\\madub\\OneDrive\\Desktop\\Construction Reports\\leavesreport.pdf";
        try {
            FileOutputStream fos = new FileOutputStream(output);
            PdfWriter writer = PdfWriter.getInstance(document, fos);
            writer.open();
            document.open();
            document.add(Image.getInstance(input));
            document.close();
            writer.close();

            JOptionPane.showMessageDialog(null, "Report Created");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Occured");
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButton10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Report().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
